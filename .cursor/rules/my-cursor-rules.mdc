---
alwaysApply: true
---

# LifeTracker - 开发规则

## 项目概述
**技术栈**: Dioxus 0.6 + Rust + SQLite (迁移中)  
**功能**: 时间追踪、财务管理、日记、习惯打卡、数据统计  
**工具**: Dioxus CLI + cargo + PowerShell

## 核心架构
- **UI框架**: Dioxus 组件 + 内联样式/CSS
- **后端**: Rust 核心逻辑 + SQLite
- **数据流**: 直接函数调用 -> 业务逻辑 -> 数据库操作
- **实时更新**: use_future + 定时器机制

## 页面结构 (模块化架构)
1. **时间追踪** (`timing/`) - 任务管理、计时器、分类、统计
   - `timing_page.rs` - 主页面入口（标签页导航）
   - `dashboard.rs` - 时间追踪仪表板
   - `task_management.rs` - 任务管理
   - `category_management.rs` - 分类管理
   - `statistics.rs` - 统计报告
2. **财务管理** (`accounting/`) - 账户、交易、预算、报表
   - `accounting_page.rs` - 主页面入口
   - `overview.rs` - 财务概览
   - `accounts.rs` - 账户管理
   - `transactions.rs` - 交易记录
   - `stats.rs` - 财务统计
   - `trend_chart.rs` - 趋势图表
3. **日记笔记** (`diary/`) - 编辑器、库管理、统计
   - `diary_page.rs` - 主页面入口
   - `overview.rs` - 日记概览
   - `editor.rs` - 富文本编辑器
   - `library.rs` - 笔记库管理
   - `stats.rs` - 写作统计
4. **系统管理** (`settings/`) - 数据管理、设置、关于
   - `settings_page.rs` - 设置主页面
   - `about.rs` - 关于页面
   - `data_management/` - 数据管理子模块
5. **习惯打卡** (`habits/`) - 习惯追踪、打卡记录
   - `habits_page.rs` - 习惯打卡页面

## 代码规范

### 通用原则
- 注释中文，日志英文
- 优先级：可读性 > 简洁性 > 性能
- 错误处理：统一使用 Result<T,E>
- 模块化：单一职责，文件不超过500行
- 层次清晰：模块嵌套反映功能层次

### Dioxus 组件
```rust
use dioxus::prelude::*;

// ✅ 模块化组件 + hooks + use_resource
// 文件: src/components/timing/task_management.rs
use dioxus::prelude::*;

#[component]
pub fn TaskManagement() -> Element {
    let tasks = use_signal(|| Vec::<Task>::new());
    
    let fetch_tasks = use_resource(move || async move {
        match get_tasks().await {
            Ok(result) => {
                tasks.set(result);
                log::info!("Tasks loaded successfully");
            }
            Err(e) => log::error!("获取任务失败: {}", e),
        }
    });
    
    rsx! {
        div { class: "p-4 bg-white dark:bg-gray-800 rounded-lg",
            // 组件内容...
        }
    }
}

// 文件: src/components/timing/mod.rs
pub mod timing_page;
pub mod dashboard;
pub mod task_management;
pub mod category_management;
pub mod statistics;

pub use timing_page::TimingPage;
pub use dashboard::TimingDashboard;
pub use task_management::TaskManagement;

// ❌ 避免：复杂的嵌套状态、未处理的错误
```

### Rust 核心逻辑
```rust
// ✅ 错误处理 + 参数化查询
#[derive(Debug, thiserror::Error)]
pub enum AppError {
    #[error("数据库错误: {0}")]
    Database(#[from] rusqlite::Error),
}

// 业务逻辑函数 (不再需要 tauri::command)
pub async fn get_tasks() -> Result<Vec<Task>, AppError> {
    let storage = get_storage()?;
    // 参数化查询防止SQL注入
    storage.execute("SELECT * FROM tasks WHERE user_id = ?1", params![user_id])
}
```

### 样式规范
```rust
// ✅ 内联样式 + 响应式 + 暗色主题
rsx! {
    div { 
        class: "flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg",
        div { 
            class: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",
            // 内容...
        }
    }
}
```

## 开发流程
```bash
# 开发环境
dx serve

# 代码检查
cargo fmt && cargo clippy

# 生产构建
dx build --release
```

## 性能优化
- **Dioxus**: use_memo、组件拆分、条件渲染
- **Rust**: 数据库连接池、异步操作
- **UI**: 懒加载、响应式设计

## 安全要求
- 参数化查询防止SQL注入
- 用户输入验证
- 内存安全 (Rust 保证)

## 功能模块
- **时间追踪**: 精确计时、暂停恢复、实时同步
- **财务管理**: 收支记录、预算监控、统计分析
- **日记功能**: 富文本编辑、心情追踪、搜索标签
- **习惯打卡**: 目标设定、连续统计、进度可视化
- **数据统计**: 多维分析、图表可视化、导出功能

## 开发提醒
- 保持代码可读性和可维护性
- 遵循现有架构模式
- 重大变更前讨论影响
- 综合生活追踪应用，不仅限于时间管理 
- 重大变更前先讨论架构影响
- 保持向后兼容性，避免破坏性更改
- LifeTracker 是一个综合性生活追踪应用，不仅限于时间管理
- 模块化开发：每个文件单一职责，不超过500行
- 优先使用子模块而非单一大文件
- 保持与原React组件的对应关系 